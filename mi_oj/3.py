'''
大数相减
两个长度超出常规整形变量上限的大数相减，请避免使用各语言内置大数处理库，如 Java.math.BigInteger 等。
输入：有 N 行测试数据，每一行有两个代表整数的字符串 a 和 b，长度超过百位。规定 a>=b，a, b > 0。
测试结果可以用 linux 小工具 bc进行测试是否正确。
输出：返回表示结果整数的字符串。
输入样例：
1231231237812739878951331231231237812739878951331231231237812739878951331231231237812739878951331231231237812739878951331231231237812739870-89513312312312378127398789513312312312378127398789513312312312378127398789513
1231231237812739878951331231231237812739878951331231231237812739878951331230000000000000000000000001-331231231237812739878951331231231
输出样例
1231231237812739878951331231231237812739878951331231231237812650365639018918853110413950365639018918853110413950365639018918853110413950357
1231231237812739878951331231231237812739878951331231231237812739878620099998762187260121048668768770
'''
"""
@param string line 为单行测试数据
@return string 处理后的结果
"""
def solution(line):
    M, N = map(str, line.strip().split("-"))
    rent = False
    res = ""
    if len(M) != len(N):
        add = "0" * (len(M) - len(N))
        N = add + N
    for i in range(len(M)):
        k = len(M) - i - 1
        now = int(M[k])
        if rent:
            now -= 1
            rent = False
        if now < int(N[k]):
            res = str(now - int(N[k]) + 10) + res
            rent = True
        else:
            res = str(now - int(N[k])) + res
    # 去掉相减后的开头0
    while res[0] == "0":
        res = res[1:]
    return res



print(solution(input()))